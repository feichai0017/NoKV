// Use protos/gen.sh to generate .pb.go files.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TinyKv_KvGet_FullMethodName            = "/pb.TinyKv/KvGet"
	TinyKv_KvScan_FullMethodName           = "/pb.TinyKv/KvScan"
	TinyKv_KvPrewrite_FullMethodName       = "/pb.TinyKv/KvPrewrite"
	TinyKv_KvCommit_FullMethodName         = "/pb.TinyKv/KvCommit"
	TinyKv_KvBatchRollback_FullMethodName  = "/pb.TinyKv/KvBatchRollback"
	TinyKv_KvResolveLock_FullMethodName    = "/pb.TinyKv/KvResolveLock"
	TinyKv_KvCheckTxnStatus_FullMethodName = "/pb.TinyKv/KvCheckTxnStatus"
)

// TinyKvClient is the client API for TinyKv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinyKvClient interface {
	KvGet(ctx context.Context, in *KvGetRequest, opts ...grpc.CallOption) (*KvGetResponse, error)
	KvScan(ctx context.Context, in *KvScanRequest, opts ...grpc.CallOption) (*KvScanResponse, error)
	KvPrewrite(ctx context.Context, in *KvPrewriteRequest, opts ...grpc.CallOption) (*KvPrewriteResponse, error)
	KvCommit(ctx context.Context, in *KvCommitRequest, opts ...grpc.CallOption) (*KvCommitResponse, error)
	KvBatchRollback(ctx context.Context, in *KvBatchRollbackRequest, opts ...grpc.CallOption) (*KvBatchRollbackResponse, error)
	KvResolveLock(ctx context.Context, in *KvResolveLockRequest, opts ...grpc.CallOption) (*KvResolveLockResponse, error)
	KvCheckTxnStatus(ctx context.Context, in *KvCheckTxnStatusRequest, opts ...grpc.CallOption) (*KvCheckTxnStatusResponse, error)
}

type tinyKvClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyKvClient(cc grpc.ClientConnInterface) TinyKvClient {
	return &tinyKvClient{cc}
}

func (c *tinyKvClient) KvGet(ctx context.Context, in *KvGetRequest, opts ...grpc.CallOption) (*KvGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvGetResponse)
	err := c.cc.Invoke(ctx, TinyKv_KvGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyKvClient) KvScan(ctx context.Context, in *KvScanRequest, opts ...grpc.CallOption) (*KvScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvScanResponse)
	err := c.cc.Invoke(ctx, TinyKv_KvScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyKvClient) KvPrewrite(ctx context.Context, in *KvPrewriteRequest, opts ...grpc.CallOption) (*KvPrewriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvPrewriteResponse)
	err := c.cc.Invoke(ctx, TinyKv_KvPrewrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyKvClient) KvCommit(ctx context.Context, in *KvCommitRequest, opts ...grpc.CallOption) (*KvCommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvCommitResponse)
	err := c.cc.Invoke(ctx, TinyKv_KvCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyKvClient) KvBatchRollback(ctx context.Context, in *KvBatchRollbackRequest, opts ...grpc.CallOption) (*KvBatchRollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvBatchRollbackResponse)
	err := c.cc.Invoke(ctx, TinyKv_KvBatchRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyKvClient) KvResolveLock(ctx context.Context, in *KvResolveLockRequest, opts ...grpc.CallOption) (*KvResolveLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvResolveLockResponse)
	err := c.cc.Invoke(ctx, TinyKv_KvResolveLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyKvClient) KvCheckTxnStatus(ctx context.Context, in *KvCheckTxnStatusRequest, opts ...grpc.CallOption) (*KvCheckTxnStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvCheckTxnStatusResponse)
	err := c.cc.Invoke(ctx, TinyKv_KvCheckTxnStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyKvServer is the server API for TinyKv service.
// All implementations should embed UnimplementedTinyKvServer
// for forward compatibility.
type TinyKvServer interface {
	KvGet(context.Context, *KvGetRequest) (*KvGetResponse, error)
	KvScan(context.Context, *KvScanRequest) (*KvScanResponse, error)
	KvPrewrite(context.Context, *KvPrewriteRequest) (*KvPrewriteResponse, error)
	KvCommit(context.Context, *KvCommitRequest) (*KvCommitResponse, error)
	KvBatchRollback(context.Context, *KvBatchRollbackRequest) (*KvBatchRollbackResponse, error)
	KvResolveLock(context.Context, *KvResolveLockRequest) (*KvResolveLockResponse, error)
	KvCheckTxnStatus(context.Context, *KvCheckTxnStatusRequest) (*KvCheckTxnStatusResponse, error)
}

// UnimplementedTinyKvServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTinyKvServer struct{}

func (UnimplementedTinyKvServer) KvGet(context.Context, *KvGetRequest) (*KvGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvGet not implemented")
}
func (UnimplementedTinyKvServer) KvScan(context.Context, *KvScanRequest) (*KvScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvScan not implemented")
}
func (UnimplementedTinyKvServer) KvPrewrite(context.Context, *KvPrewriteRequest) (*KvPrewriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvPrewrite not implemented")
}
func (UnimplementedTinyKvServer) KvCommit(context.Context, *KvCommitRequest) (*KvCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvCommit not implemented")
}
func (UnimplementedTinyKvServer) KvBatchRollback(context.Context, *KvBatchRollbackRequest) (*KvBatchRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvBatchRollback not implemented")
}
func (UnimplementedTinyKvServer) KvResolveLock(context.Context, *KvResolveLockRequest) (*KvResolveLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvResolveLock not implemented")
}
func (UnimplementedTinyKvServer) KvCheckTxnStatus(context.Context, *KvCheckTxnStatusRequest) (*KvCheckTxnStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvCheckTxnStatus not implemented")
}
func (UnimplementedTinyKvServer) testEmbeddedByValue() {}

// UnsafeTinyKvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinyKvServer will
// result in compilation errors.
type UnsafeTinyKvServer interface {
	mustEmbedUnimplementedTinyKvServer()
}

func RegisterTinyKvServer(s grpc.ServiceRegistrar, srv TinyKvServer) {
	// If the following call pancis, it indicates UnimplementedTinyKvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TinyKv_ServiceDesc, srv)
}

func _TinyKv_KvGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyKvServer).KvGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyKv_KvGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyKvServer).KvGet(ctx, req.(*KvGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyKv_KvScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyKvServer).KvScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyKv_KvScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyKvServer).KvScan(ctx, req.(*KvScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyKv_KvPrewrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvPrewriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyKvServer).KvPrewrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyKv_KvPrewrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyKvServer).KvPrewrite(ctx, req.(*KvPrewriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyKv_KvCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyKvServer).KvCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyKv_KvCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyKvServer).KvCommit(ctx, req.(*KvCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyKv_KvBatchRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBatchRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyKvServer).KvBatchRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyKv_KvBatchRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyKvServer).KvBatchRollback(ctx, req.(*KvBatchRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyKv_KvResolveLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvResolveLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyKvServer).KvResolveLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyKv_KvResolveLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyKvServer).KvResolveLock(ctx, req.(*KvResolveLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyKv_KvCheckTxnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvCheckTxnStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyKvServer).KvCheckTxnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyKv_KvCheckTxnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyKvServer).KvCheckTxnStatus(ctx, req.(*KvCheckTxnStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TinyKv_ServiceDesc is the grpc.ServiceDesc for TinyKv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinyKv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TinyKv",
	HandlerType: (*TinyKvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KvGet",
			Handler:    _TinyKv_KvGet_Handler,
		},
		{
			MethodName: "KvScan",
			Handler:    _TinyKv_KvScan_Handler,
		},
		{
			MethodName: "KvPrewrite",
			Handler:    _TinyKv_KvPrewrite_Handler,
		},
		{
			MethodName: "KvCommit",
			Handler:    _TinyKv_KvCommit_Handler,
		},
		{
			MethodName: "KvBatchRollback",
			Handler:    _TinyKv_KvBatchRollback_Handler,
		},
		{
			MethodName: "KvResolveLock",
			Handler:    _TinyKv_KvResolveLock_Handler,
		},
		{
			MethodName: "KvCheckTxnStatus",
			Handler:    _TinyKv_KvCheckTxnStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}
